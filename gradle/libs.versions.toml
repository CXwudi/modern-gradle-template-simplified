# version catalog can be used in any gradle build, simply add
#
# dependencyResolutionManagement {
#   versionCatalogs {
#     create("libs") {
#       from(files("path/to/libs.versions.toml"))
#     }
#   }
# }
#
# to settings.gradle.kts to include the version catalog in your build.
# any settings.gradle.kts works!
# see https://docs.gradle.org/current/userguide/platforms.html#sec:sharing-catalogs for more details
[versions]
# java version is defined in my.jvm-base.gradle.kts
# lib versions
kotlin = "1.9.24"
# plugin dep versions
# empty for now

[libraries]
# unless there is a keyword conflict or the name is wired
# bom, naming convention: bom-<name>
bom-coroutines = "org.jetbrains.kotlinx:kotlinx-coroutines-bom:1.8.0"

# plugin dependencies (for both projects and settings), naming convention: pluginDep/settingDep + -<nameInCamelCase>
pluginDep-kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
settingDep-gradleEnterprise = "com.gradle.develocity:com.gradle.develocity.gradle.plugin:3.17.2"
settingDep-foojayResolver = "org.gradle.toolchains:foojay-resolver:0.8.0"

# dependencies, naming convention: dep-<nameInCamelCase>
dep-mockk = "io.mockk:mockk:1.13.10"

[plugins]
# put your plugins used in the main build here

# however, when multiple main builds have similar plugin settings on a plugin here,
# then it have to be moved to a separated precompiled script plugin, like the `pluginDep-kotlin` above

# this is only used by the workaround in root build.gradle.kts
kotlinJvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }

# Uncomments these two plugins if you prefer to use plugins to update version catalog.
# However, I recommend to use renovatebot rather than these plugins whenever possible
#benManesVersions = "com.github.ben-manes.versions:0.50.0"
#versionCatalogUpdate = "nl.littlerobots.version-catalog-update:0.8.1"
